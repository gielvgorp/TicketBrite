name: TicketBrite CI Pipeline

on:
  push:
    branches:
      - main
      - CI/CD
  pull_request:
    branches:
      - main
      - CI/CD

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Stap 1: Haal de code op
      - name: Checkout code
        uses: actions/checkout@v4

      # Stap 2: Log in op Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Stap 3: Maak de Docker images voor de services
      - name: Build Docker Images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ticketbrite-api ./TicketBriteAPI
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ticketbrite-frontend ./TicketBrite
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ticketbrite-db ./db

      # Stap 4: Genereer een docker-compose.ci.yml-bestand om de services te starten
      - name: Create Docker Compose file
        run: |
          cat << EOF > docker-compose.ci.yml
          version: '3.8'
          services:
            sqlserver:
              image: mcr.microsoft.com/mssql/server:2022-latest
              container_name: sqlserver-container
              environment:
                - ACCEPT_EULA=Y
                - MSSQL_SA_PASSWORD=YourPassword123
              ports:
                - "1433:1433"
              networks:
                - app-network
              volumes:
                - mssql_data:/var/opt/mssql
                
            api:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/ticketbrite-api
              environment:
                ConnectionStrings__DefaultConnection: "Server=db;Database=TicketBriteDb;User=sa;Password=${{ secrets.DB_PASSWORD_CI }};TrustServerCertificate=True"
              ports:
                - "5000:5000"
              depends_on:
                - sqlserver
                
            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/ticketbrite-frontend
              ports:
                - "3000:3000"
              depends_on:
                - api
          EOF

      # Stap 5: Start de services met Docker Compose
      - name: Start services
        run: docker compose -f docker-compose.ci.yml up -d

      # Stap 6: Wacht tot de services beschikbaar zijn
      - name: Wait for services
        run: |
          npx wait-on http://localhost:5000
          npx wait-on http://localhost:3000

      # Stap 7: Voer Cypress-tests uit
      - name: Run Cypress tests
        working-directory: ./TicketBrite
        run: npx cypress run

      # Stap 8: Stop en verwijder de services
      - name: Stop services
        run: docker compose -f docker-compose.ci.yml down
