name: TicketBrite CI Pipeline

on:
  push:
    branches:
      - main
      - CI/CD
      - CI/CD-http
  pull_request:
    branches:
      - main
      - CI/CD

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Stap 1: Haal de code op
      - name: Checkout code
        uses: actions/checkout@v4

      # Stap 2: Setup .NET Core en Node.js
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create Docker Compose file for database
        run: |
          cat << EOF > docker-compose.ci.yml
          version: '3.8'
          services:
            db:
              image: mcr.microsoft.com/mssql/server:2022-latest
              environment:
                ACCEPT_EULA: Y
                SA_PASSWORD: ${{ secrets.DB_PASSWORD_CI }}
                MSSQL_PID: Express
              ports:
                - "1433:1433"
          EOF

      # Stap 4: Start de database
      - name: Start database
        run: |
          docker compose -f docker-compose.ci.yml up -d

      # Stap 5: Herstel afhankelijkheden en bouw de API
      - name: Restore dependencies
        run: dotnet restore ./TicketBriteAPI/TicketBriteAPI.sln

      - name: Build API
        run: dotnet build ./TicketBriteAPI/TicketBriteAPI.sln --configuration Release --no-restore

      # Stap 6: Start de API
      - name: Start API
        env:
          ASPNETCORE_ENVIRONMENT: "Development"
          ConnectionStrings__DefaultConnection: "Server=localhost;Database=TicketBrite;User=sa;Password=${{ secrets.DB_PASSWORD_CI }};TrustServerCertificate=True"
          ASPNETCORE_URLS: "http://+:7150/"
        run: |
          dotnet run --project ./TicketBriteAPI/TicketBriteAPI/TicketBriteAPI.csproj --launch-profile Development &
          sleep 40

      # Stap 7: Installeer frontend-afhankelijkheden
      - name: Install frontend dependencies
        working-directory: ./TicketBrite
        run: npm ci

      # Stap 8: Start de frontend
      - name: Start frontend
        working-directory: ./TicketBrite
        run: |
          npm run build
          npm run dev &
      
      - name: Wait for Frontend
        run: npx wait-on http://localhost:5173

      # Stap 10: Voer Cypress-tests uit
      - name: Run Cypress tests
        working-directory: ./TicketBrite
        run: npx cypress run

      # Stap 11: Stop services
      - name: Stop services
        run: docker-compose -f docker-compose.ci.yml down